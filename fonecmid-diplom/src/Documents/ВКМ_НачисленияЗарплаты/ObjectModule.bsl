
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных

#КонецОбласти

#Область ПрограммныйИнтерфейс

// Код процедур и функций

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПроведения (Отказ, РезультатПроведения)
	
	СформироватьДвижения();
	
	РассчитатьОклад();
	РассчитатьОтпуск();
//	РассчитатьПремию ();
	СформироватьДвиженияУдержания();
	СформироватьДвиженияВзаиморасчетыПриход();
	СформироватьДвиженияВзаиморасчетыРасход();
	СформироватьДвиженияОтпуска();
	
КонецПроцедуры	

Процедура СформироватьДвижения()
	
	СформироватьДвиженияПоОкладу();
	СформироватьДвиженияПрочиеОсновныеНачисления();
	
	//СформироватьДвиженияДополнительныеНачисления();
	
	Движения.ВКМ_ОсновныеНачисления.Записать();
	
	
КонецПроцедуры

Процедура СформироватьДвиженияОтпуска()
	
	Движения.ВКМ_Отпуска.Записывать = Истина;    
	Движения.ВКМ_Отпуска.Записать();
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ВКМ_Отпуска");  
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = Начисления;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Сотрудник","Сотрудник"); 
	Блокировка.Заблокировать();
	
	ТекущиеДанные = Начисления.Выгрузить();
	
	Для Каждого ТекСтрока Из ТекущиеДанные Цикл
		
		Если ТипЗнч(ТекСтрока.ВидРасчета) <> Тип("ПланВидовРасчетаСсылка.ВКМ_ОсновныеНачисления") Тогда
			Продолжить;
		КонецЕсли;
			
		Если ТекСтрока.ВидРасчета <> ПланыВидовРасчета.ВКМ_ОсновныеНачисления.Отпуск Тогда
			Продолжить;
		КонецЕсли;
		
		Движение = Движения.ВКМ_Отпуска.Добавить();
		Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
		Движение.Период = Дата;
		Движение.Сотрудник = ТекСтрока.Сотрудник;
		Движение.КоличествоДней = (ТекСтрока.ДатаОкончания - ТекСтрока.ДатаНачала +1)/60/60/24;
	КонецЦикла;
	
КонецПроцедуры

Процедура СформироватьДвиженияПоОкладу()
	
	Отбор = Новый Структура;
	Отбор.Вставить("ВидРасчета",ПланыВидовРасчета.ВКМ_ОсновныеНачисления.Оклад);
	
	СтрокиОклада = Начисления.НайтиСтроки(Отбор);
	
	Если СтрокиОклада.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	МинимальнаяДатаНачала = СтрокиОклада[0].ДатаНачала;
	МаксимальнаяДатаОкончания = СтрокиОклада[0].ДатаОкончания;
	
	Для Сч=1 по СтрокиОклада.Количество()-1 Цикл
		Если МинимальнаяДатаНачала > СтрокиОклада[Сч].ДатаНачала Тогда
			МинимальнаяДатаНачала = СтрокиОклада[Сч].ДатаНачала
		КонецЕсли;
		Если МаксимальнаяДатаОкончания < СтрокиОклада[Сч].ДатаОкончания Тогда
			МаксимальнаяДатаОкончания = СтрокиОклада[Сч].ДатаОкончания
		КонецЕсли;
	КонецЦикла;
		
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВКМ_НачисленияЗарплатыНачисления.Сотрудник,
		|	ВКМ_НачисленияЗарплатыНачисления.Подразделение,
		|	ВКМ_НачисленияЗарплатыНачисления.ВидРасчета,
		|	ВКМ_НачисленияЗарплатыНачисления.ГрафикРаботы,
		|	ВКМ_НачисленияЗарплатыНачисления.ДатаНачала,
		|	ВКМ_НачисленияЗарплатыНачисления.ДатаОкончания
		|ПОМЕСТИТЬ ВТ_ПериодыОкладыИсходные
		|ИЗ
		|	Документ.ВКМ_НачисленияЗарплаты.Начисления КАК ВКМ_НачисленияЗарплатыНачисления
		|ГДЕ
		|	ВКМ_НачисленияЗарплатыНачисления.Ссылка = &Ссылка
		|	И ВКМ_НачисленияЗарплатыНачисления.ВидРасчета = &ВидРасчета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВКМ_СведенияОСотрудникахСрезПоследних.Период,
		|	ВКМ_СведенияОСотрудникахСрезПоследних.Сотрудник,
		|	ВКМ_СведенияОСотрудникахСрезПоследних.Подразделение,
		|	ВКМ_СведенияОСотрудникахСрезПоследних.Оклад
		|ПОМЕСТИТЬ ВТ_ИзменениеОклада
		|ИЗ
		|	РегистрСведений.ВКМ_УсловияОплатыСотрудников.СрезПоследних(&МинимальнаяДатаНачала, (Сотрудник, Подразделение) В
		|		(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|			ВТ_ПериодыОкладыИсходные.Сотрудник КАК Сотрудник,
		|			ВТ_ПериодыОкладыИсходные.Подразделение КАК Подразделение
		|		ИЗ
		|			ВТ_ПериодыОкладыИсходные КАК ВТ_ПериодыОкладыИсходные)) КАК ВКМ_СведенияОСотрудникахСрезПоследних
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВКМ_СведенияОСотрудниках.Период,
		|	ВКМ_СведенияОСотрудниках.Сотрудник,
		|	ВКМ_СведенияОСотрудниках.Подразделение,
		|	ВКМ_СведенияОСотрудниках.Оклад
		|ИЗ
		|	РегистрСведений.ВКМ_УсловияОплатыСотрудников КАК ВКМ_СведенияОСотрудниках
		|ГДЕ
		|	ВКМ_СведенияОСотрудниках.Период > &МинимальнаяДатаНачала
		|	И ВКМ_СведенияОСотрудниках.Период <= &МаксимальнаяДатаОкончания
		|	И (ВКМ_СведенияОСотрудниках.Сотрудник, ВКМ_СведенияОСотрудниках.Подразделение) В
		|		(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|			ВТ_ПериодыОкладыИсходные.Сотрудник,
		|			ВТ_ПериодыОкладыИсходные.Подразделение
		|		ИЗ
		|			ВТ_ПериодыОкладыИсходные КАК ВТ_ПериодыОкладыИсходные)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДатаНачала.Сотрудник КАК Сотрудник,
		|	ДатаНачала.Подразделение КАК Подразделение,
		|	ДатаНачала.Период КАК ДатаНачала,
		|	ДатаНачала.Оклад КАК Оклад,
		|	МИНИМУМ(ЕСТЬNULL(ДОБАВИТЬКДАТЕ(ДатаОкончания.Период, СЕКУНДА, -1), ДАТАВРЕМЯ(3999, 12, 31))) КАК ДатаОкончания
		|ПОМЕСТИТЬ ВТ_ИнтервалыОклада
		|ИЗ
		|	ВТ_ИзменениеОклада КАК ДатаНачала
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ИзменениеОклада КАК ДатаОкончания
		|		ПО ДатаОкончания.Подразделение = ДатаНачала.Подразделение
		|		И ДатаНачала.Сотрудник = ДатаОкончания.Сотрудник
		|		И ДатаНачала.Период < ДатаОкончания.Период
		|СГРУППИРОВАТЬ ПО
		|	ДатаНачала.Сотрудник,
		|	ДатаНачала.Подразделение,
		|	ДатаНачала.Оклад,
		|	ДатаНачала.Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ПериодыОкладыИсходные.Сотрудник,
		|	ВТ_ПериодыОкладыИсходные.Подразделение,
		|	ВТ_ПериодыОкладыИсходные.ВидРасчета,
		|	ВТ_ИнтервалыОклада.Оклад КАК Показатель,
		|	ВТ_ПериодыОкладыИсходные.ГрафикРаботы КАК График,
		|	ВЫБОР
		|		КОГДА ВТ_ИнтервалыОклада.ДатаНачала > ВТ_ПериодыОкладыИсходные.ДатаНачала
		|			ТОГДА ВТ_ИнтервалыОклада.ДатаНачала
		|		ИНАЧЕ ВТ_ПериодыОкладыИсходные.ДатаНачала
		|	КОНЕЦ КАК ПериодДействияНачало,
		|	ВЫБОР
		|		КОГДА ВТ_ИнтервалыОклада.ДатаОкончания < ВТ_ПериодыОкладыИсходные.ДатаОкончания
		|			ТОГДА ВТ_ИнтервалыОклада.ДатаОкончания
		|		ИНАЧЕ ВТ_ПериодыОкладыИсходные.ДатаОкончания
		|	КОНЕЦ КАК ПериодДействияКонец
		|ИЗ
		|	ВТ_ПериодыОкладыИсходные КАК ВТ_ПериодыОкладыИсходные
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ИнтервалыОклада КАК ВТ_ИнтервалыОклада
		|		ПО ВТ_ПериодыОкладыИсходные.Сотрудник = ВТ_ИнтервалыОклада.Сотрудник
		|		И ВТ_ПериодыОкладыИсходные.Подразделение = ВТ_ИнтервалыОклада.Подразделение
		|		И ВТ_ИнтервалыОклада.ДатаНачала <= ВТ_ПериодыОкладыИсходные.ДатаОкончания
		|		И ВТ_ПериодыОкладыИсходные.ДатаНачала <= ВТ_ИнтервалыОклада.ДатаОкончания";
	
	Запрос.УстановитьПараметр("МинимальнаяДатаНачала", МинимальнаяДатаНачала);
	Запрос.УстановитьПараметр("ВидРасчета", ПланыВидовРасчета.ВКМ_ОсновныеНачисления.Оклад);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("МаксимальнаяДатаОкончания", МаксимальнаяДатаОкончания);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Движение = Движения.ВКМ_ОсновныеНачисления.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, ВыборкаДетальныеЗаписи);
		Движение.ПериодРегистрации = Дата;
	КонецЦикла;
	
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
КонецПроцедуры

Процедура СформироватьДвиженияПрочиеОсновныеНачисления()
	
	Для Каждого Строка Из Начисления Цикл
		
		Если ТипЗнч(Строка.ВидРасчета) <> Тип("ПланВидовРасчетаСсылка.ВКМ_ОсновныеНачисления") Тогда
			Продолжить;
		КонецЕсли;
			
		Если Строка.ВидРасчета = ПланыВидовРасчета.ВКМ_ОсновныеНачисления.Оклад Тогда
			Продолжить;
		КонецЕсли;	
		
		Движение = Движения.ВКМ_ОсновныеНачисления.Добавить();
		Движение.ПериодРегистрации = Дата;
		Движение.ПериодДействияНачало = Строка.ДатаНачала;
		Движение.ПериодДействияКонец = Строка.ДатаОкончания;
		Движение.ВидРасчета = Строка.ВидРасчета;
		Движение.Сотрудник = Строка.Сотрудник;
		Движение.Подразделение = Строка.Подразделение;
		Движение.График = Строка.ГрафикРаботы;
		
		Если Строка.ВидРасчета = ПланыВидовРасчета.ВКМ_ОсновныеНачисления.Отпуск Тогда
			Движение.БазовыйПериодНачало = НачалоМесяца(ДобавитьМесяц(Строка.ДатаНачала,-12));
			Движение.БазовыйПериодКонец = НачалоМесяца(ДобавитьМесяц(Строка.ДатаОкончания,-1));
		КонецЕсли;	
		
	КонецЦикла;	


КонецПроцедуры	

Процедура СформироватьДвиженияУдержания()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВКМ_ОсновныеНачисления.Сотрудник,
		|	ВКМ_ОсновныеНачисления.Подразделение,
		|	СУММА(ВКМ_ОсновныеНачисления.Сумма) КАК Сумма
		|ИЗ
		|	РегистрРасчета.ВКМ_ОсновныеНачисления КАК ВКМ_ОсновныеНачисления
		|ГДЕ
		|	ВКМ_ОсновныеНачисления.Регистратор = &Ссылка
		|СГРУППИРОВАТЬ ПО
		|	ВКМ_ОсновныеНачисления.Сотрудник,
		|	ВКМ_ОсновныеНачисления.Подразделение";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если ВыборкаДетальныеЗаписи.Сумма <= 0 Тогда
			Продолжить;
		КонецЕсли;	
		ДвижениеУдержание = Движения.ВКМ_Удержания.Добавить();
		ДвижениеУдержание.Сторно = Ложь;
		ДвижениеУдержание.ВидРасчета = ПланыВидовРасчета.ВКМ_Удержания.НДФЛ;
		ДвижениеУдержание.ПериодРегистрации = Дата;
		ДвижениеУдержание.Сотрудник = ВыборкаДетальныеЗаписи.Сотрудник;
		ДвижениеУдержание.Подразделение = ВыборкаДетальныеЗаписи.Подразделение;
		ДвижениеУдержание.СуммаУдержания = ОКР(ВыборкаДетальныеЗаписи.Сумма * 0.13,2);
	КонецЦикла;
	Движения.ВКМ_Удержания.Записать();
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА	
КонецПроцедуры	

Процедура СформироватьДвиженияВзаиморасчетыРасход()
		
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВКМ_Удержания.Сотрудник,
		|	СУММА(ВКМ_Удержания.СуммаУдержания) КАК СуммаУдержания
		|ИЗ
		|	РегистрРасчета.ВКМ_Удержания КАК ВКМ_Удержания
		|ГДЕ
		|	ВКМ_Удержания.Регистратор = &Регистратор
		|СГРУППИРОВАТЬ ПО
		|	ВКМ_Удержания.Сотрудник";
	
	Запрос.УстановитьПараметр("Регистратор", Ссылка);
	
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Движения.ВКМ_ВзаиморасчетыССотрудниками.Записывать = Истина;    
	Движения.ВКМ_ВзаиморасчетыССотрудниками.Записать();
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ВКМ_ВзаиморасчетыССотрудниками");  
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = Начисления;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Сотрудник","Сотрудник"); 
	Блокировка.Заблокировать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Движение = Движения.ВКМ_ВзаиморасчетыССотрудниками.Добавить();
		Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
		Движение.Период = Дата;
		Движение.Сотрудник = ВыборкаДетальныеЗаписи.Сотрудник;
		Движение.Сумма = ВыборкаДетальныеЗаписи.СуммаУдержания;
	КонецЦикла;
	
	
	
КонецПроцедуры
Процедура СформироватьДвиженияВзаиморасчетыПриход()
		
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВКМ_ОсновныеНачисления.Сотрудник,
		|	СУММА(ВКМ_ОсновныеНачисления.Сумма) КАК СуммаНачисления
		|ИЗ
		|	РегистрРасчета.ВКМ_ОсновныеНачисления КАК ВКМ_ОсновныеНачисления
		|ГДЕ
		|	ВКМ_ОсновныеНачисления.Регистратор = &Регистратор
		|СГРУППИРОВАТЬ ПО
		|	ВКМ_ОсновныеНачисления.Сотрудник";
	
	Запрос.УстановитьПараметр("Регистратор", Ссылка);
	
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Движения.ВКМ_ВзаиморасчетыССотрудниками.Записывать = Истина;    
	Движения.ВКМ_ВзаиморасчетыССотрудниками.Записать();
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ВКМ_ВзаиморасчетыССотрудниками");  
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = Начисления;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Сотрудник","Сотрудник"); 
	Блокировка.Заблокировать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Движение = Движения.ВКМ_ВзаиморасчетыССотрудниками.Добавить();
		Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
		Движение.Период = Дата;
		Движение.Сотрудник = ВыборкаДетальныеЗаписи.Сотрудник;
		Движение.Сумма = ВыборкаДетальныеЗаписи.СуммаНачисления ;
	КонецЦикла;
	
	
	
КонецПроцедуры

Процедура РассчитатьОклад()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВКМ_ОсновныеНачисленияДанныеГрафика.НомерСтроки КАК НомерСтроки,
		|	ВКМ_ОсновныеНачисленияДанныеГрафика.РабочийДеньФактическийПериодДействия КАК Факт,
		|	ВКМ_ОсновныеНачисленияДанныеГрафика.РабочийДеньПериодДействия КАК Норма
		|ИЗ
		|	РегистрРасчета.ВКМ_ОсновныеНачисления.ДанныеГрафика(ВидРасчета = &ВидРасчета
		|	И Регистратор = &Ссылка) КАК ВКМ_ОсновныеНачисленияДанныеГрафика";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("ВидРасчета", ПланыВидовРасчета.ВКМ_ОсновныеНачисления.Оклад);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Движение = Движения.ВКМ_ОсновныеНачисления[ВыборкаДетальныеЗаписи.НомерСтроки - 1];
		Движение.Сумма = Движение.Показатель * ВыборкаДетальныеЗаписи.Факт /  ВыборкаДетальныеЗаписи.Норма;
		Движение.ДнейОтработано = ВыборкаДетальныеЗаписи.Факт;
	
	Если Движение.Сторно Тогда
		Движение.Сумма = -Движение.Сумма;
		Движение.ДнейОтработано = -Движение.ДнейОтработано;
	КонецЕсли;	
	
	КонецЦикла;
	
	Движения.ВКМ_ОсновныеНачисления.Записать (,Истина);
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

	
КонецПроцедуры

Процедура РассчитатьОтпуск();
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВКМ_ОсновныеНачисления.НомерСтроки КАК НомерСтроки,
		|	ЕСТЬNULL(ВКМ_ОсновныеНачисленияБазаВКМ_ДополнительныеНачисления.СуммаБаза, 0) КАК БазаДоп,
		|	ЕСТЬNULL(ВКМ_ОсновныеНачисленияБазаВКМ_ОсновныеНачисления.СуммаБаза, 0) КАК БазаОсн,
		|	ЕСТЬNULL(ВКМ_ОсновныеНачисленияБазаВКМ_ОсновныеНачисления.ДнейОтработаноБаза, 0) КАК БазаОтработано,
		|	ВКМ_ОсновныеНачисленияДанныеГрафика.РабочийДеньФактическийПериодДействия КАК Факт,
		|	ВКМ_ОсновныеНачисленияДанныеГрафика.РабочийДеньБазовыйПериод КАК ДнейРабочих
		|ИЗ
		|	РегистрРасчета.ВКМ_ОсновныеНачисления КАК ВКМ_ОсновныеНачисления
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ВКМ_ОсновныеНачисления.БазаВКМ_ОсновныеНачисления(&Измерение, &Измерение,,
		|			Регистратор = &Ссылка
		|		И ВидРасчета = &Отпуск) КАК ВКМ_ОсновныеНачисленияБазаВКМ_ОсновныеНачисления
		|		ПО ВКМ_ОсновныеНачисления.НомерСтроки = ВКМ_ОсновныеНачисленияБазаВКМ_ОсновныеНачисления.НомерСтроки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ВКМ_ОсновныеНачисления.БазаВКМ_ДополнительныеНачисления(&Измерение, &Измерение,,
		|			Регистратор = &Ссылка
		|		И ВидРасчета = &Отпуск) КАК ВКМ_ОсновныеНачисленияБазаВКМ_ДополнительныеНачисления
		|		ПО ВКМ_ОсновныеНачисления.НомерСтроки = ВКМ_ОсновныеНачисленияБазаВКМ_ДополнительныеНачисления.НомерСтроки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ВКМ_ОсновныеНачисления.ДанныеГрафика(Регистратор = &Ссылка
		|		И ВидРасчета = &Отпуск) КАК ВКМ_ОсновныеНачисленияДанныеГрафика
		|		ПО ВКМ_ОсновныеНачисления.НомерСтроки = ВКМ_ОсновныеНачисленияДанныеГрафика.НомерСтроки
		|ГДЕ
		|	ВКМ_ОсновныеНачисления.Регистратор = &Ссылка
		|	И ВКМ_ОсновныеНачисления.ВидРасчета = &Отпуск";
	
	
	Запрос.УстановитьПараметр("Отпуск", ПланыВидовРасчета.ВКМ_ОсновныеНачисления.Отпуск);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Измерение = Новый Массив;
	Измерение.Добавить("Подразделение");
	Измерение.Добавить("Сотрудник");
	
	Запрос.УстановитьПараметр("Измерение", Измерение);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Движение = Движения.ВКМ_ОсновныеНачисления[ВыборкаДетальныеЗаписи.НомерСтроки - 1];
		//Движение.ДнейОтработано = ВыборкаДетальныеЗаписи.Факт;
	
	Если ВыборкаДетальныеЗаписи.БазаОтработано = 0 Тогда
		Движение.Сумма = 0;
		Продолжить;
	КонецЕсли;	
	КалендарныеДни = (Движение.ПериодДействияКонец - Движение.ПериодДействияНачало + 1)  / 60 / 60 / 24;
	Движение.Сумма = (ВыборкаДетальныеЗаписи.БазаДоп + ВыборкаДетальныеЗаписи.БазаОсн) / ВыборкаДетальныеЗаписи.ДнейРабочих * КалендарныеДни;
	
	Если Движение.Сторно Тогда
		Движение.Сумма = -Движение.Сумма;
		Движение.ДнейОтработано = -Движение.ДнейОтработано;
	КонецЕсли;	
	
	КонецЦикла;

	Движения.ВКМ_ОсновныеНачисления.Записать (,Истина);
	
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Код процедур и функций

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Код процедур и функций

#КонецОбласти

#Область Инициализация

#КонецОбласти

#КонецЕсли
